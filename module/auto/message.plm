# $Id$
# copyright (c)1998-2000 Yoshinori Hasegawa <hasegawa@madoka.org>

package auto_message;

$_ = 'auto_message';

sub initialize {
  $INTERVAL = 3600;
  $DATE = '%m/%d %H:%M';
  $FORMAT = '#(date) #(from.name|from.nick|from.nick.now) >> #(message)';
}

sub module_disable {
  local($userno) = @_;
  local($no, $nick);
  foreach $key (keys(%lasttime)) {
    ($no, $nick) = split(/$;/, $key, 2);
    next unless $'userno[$no] == $userno;
    delete $lasttime{$key};
  }
}

sub server_close {
  local($serverno) = @_;
  local($no, $nick);
  foreach $key (keys(%lasttime)) {
    ($no, $nick) = split(/$;/, $key, 2);
    next unless $no == $serverno;
    delete $lasttime{$key};
  }
}

sub ss_join {
  local($serverno, $prefix, $cmd, @params) = @_;
  &receive($serverno, $prefix);
  return ($prefix, $cmd, @params);
}

sub ss_nick {
  local($serverno, $prefix, $cmd, @params) = @_;
  local($nick);
  $nick = &'prefix($prefix);
  $lasttime{$serverno, $params[0]} = $lasttime{$serverno, $nick};
  delete $lasttime{$serverno, $nick};
  $user = $params[0] . substr($prefix, index($prefix, '!'));
  &receive($serverno, $user);
  return ($prefix, $cmd, @params);
}

sub ss_part {
  local($serverno, $prefix, $cmd, @params) = @_;
  &receive($serverno, $prefix);
  return ($prefix, $cmd, @params);
}

sub ss_topic {
  local($serverno, $prefix, $cmd, @params) = @_;
  &receive($serverno, $prefix);
  return ($prefix, $cmd, @params);
}

sub ss_kick {
  local($serverno, $prefix, $cmd, @params) = @_;
  &receive($serverno, $prefix);
  return ($prefix, $cmd, @params);
}

sub ss_mode {
  local($serverno, $prefix, $cmd, @params) = @_;
  &receive($serverno, $prefix);
  return ($prefix, $cmd, @params);
}

sub ss_privmsg {
  local($serverno, $prefix, $cmd, @params) = @_;
  local($userno, $str, $who, $text);
  $userno = $'userno[$serverno];
  if ($params[1]) {
    foreach $get (&'property($userno, 'get')) {
      next unless &match($params[1], $get);
      &get($serverno, $prefix, $params[0]);
      return ($prefix, $cmd, @params);
    }
    foreach $check (&'property($userno, 'check')) {
      next unless &match($params[1], $check);
      &check($serverno, $prefix, $params[0]);
      return ($prefix, $cmd, @params);
    }
    ($str, $who, $text) = split(/\s+/, $params[1], 3);
    if ($text) {
      foreach $send (&'property($userno, 'send')) {
        next unless &match($str, $send);
        &send($serverno, $prefix, $params[0], $who, $text);
        return ($prefix, $cmd, @params);
      }
    }
  }
  &receive($serverno, $prefix);
  return ($prefix, $cmd, @params);
}

sub match {
  local($str, $pattern) = @_;

  use Encode;

  $str = decode_utf8($str);
  $pattern = decode_utf8($pattern);

  if ($str =~ /$pattern/) {
    return 1;
  } else {
    return 0;
  }
}

sub receive {
  local($serverno, $prefix) = @_;
  local($userno, $nick, $time, $int, @msg, %alias);
  $userno = $'userno[$serverno];
  $nick = &'prefix($prefix);
  @msg = &get_msg($userno, $prefix);
  if (@msg) {
    %alias = &get_alias_user($userno, $prefix);
    $alias{'nick.now'} = $nick;
    $time = time();
    $alias{'number'} = @msg;
    $lasttime{$serverno, $nick} = 0 unless $lasttime{$serverno, $nick};
    $int = &'property($userno, 'interval') || $INTERVAL;
    if ($time - $lasttime{$serverno, $nick} > $int) {
      foreach $reply (&'property($userno, 'receive')) {
        &privmsg($serverno, $nick, &'format($reply, %alias));
      }
    }
    $lasttime{$serverno, $nick} = $time;
  } else {
    $lasttime{$serverno, $nick} = 0;
  }
}

sub get {
  local($serverno, $prefix, $chan) = @_;
  local($userno, $nick, @msg, $to, @data, %alias, %from, $date, @format);
  $userno = $'userno[$serverno];
  $nick = &'prefix($prefix);
  %alias = &get_alias_user($userno, $prefix);
  $alias{'nick.now'} = $nick;
  if (&'channel($chan)) {
    $alias{'channel'} = $chan;
    $to = $chan;
  } else {
    $to = $nick;
  }
  @msg = &get_msg($userno, $prefix);
  if (@msg) {
    foreach $line (@msg) {
      @data = split(/\s+/, $line, 5);
      %from = &get_alias_user($userno, $data[2], 'from');
      $from{'from.nick.now'} = &'prefix($data[2]);
      if (&'channel($data[3])) {
        $from{'from.channel'} = $data[3];
      }
      $from{'message'} = $data[4];
      $date = &'property($userno, 'date') || $DATE;
      $from{'date'} = &'date($date, $data[0]);
      @format = &'property($userno, 'format');
      if (@format) {
        foreach $reply (@format) {
          &privmsg($serverno, $nick, &'format($reply, %alias, %from));
        }
      } else {      
        &privmsg($serverno, $nick, &'format($FORMAT, %alias, %from));
      }
    }
    &delete_msg($userno, @msg);
  } else {
    foreach $reply (&'property($userno, 'nothing')) {
      &privmsg($serverno, $to, &'format($reply, %alias));
    }
  }
  $lasttime{$serverno, $nick} = 0;
}

sub check {
  local($serverno, $prefix, $chan) = @_;
  local($userno, $nick, $time, @msg, %alias);
  $userno = $'userno[$serverno];
  $nick = &'prefix($prefix);
  %alias = &get_alias_user($userno, $prefix);
  $alias{'nick.now'} = $nick;
  if (&'channel($chan)) {
    $alias{'channel'} = $chan;
    $to = $chan;
  } else {
    $to = $nick;
  }
  @msg = &get_msg($userno, $prefix);
  if (@msg) {
    $alias{'number'} = @msg;
    foreach $reply (&'property($userno, 'exists')) {
      &privmsg($serverno, $to, &'format($reply, %alias));
    }
    $lasttime{$serverno, $nick} = time();
  } else {
    foreach $reply (&'property($userno, 'nothing')) {
      &privmsg($serverno, $to, &'format($reply, %alias));
    }
    $lasttime{$serverno, $nick} = 0;
  }
}

sub send {
  local($serverno, $prefix, $chan, $who, $text) = @_; 
  local($userno, $nick, %alias, %to, $to);
  $userno = $'userno[$serverno];
  $nick = &'prefix($prefix);
  %alias = &get_alias_user($userno, $prefix);
  $alias{'nick.now'} = $nick;
  $alias{'to'} = $who;
  if (&'channel($chan)) {
    $alias{'channel'} = $chan;
    $to = $chan;
  } else {
    $to = $nick;
  }
  %to = &get_alias_name_nick($userno, $who, 'to');
  if (%to || $who =~ /^[A-\}][\-\dA-\}]*$/ && length($who) <= 9) {
    &add_msg($userno, join(' ', time(), $who, $prefix, $chan, $text));
    foreach $reply (&'property($userno, 'accept')) {
      &privmsg($serverno, $to, &'format($reply, %alias, %to));
    }
  } else {
    foreach $reply (&'property($userno, 'unknown')) {
      &privmsg($serverno, $to, &'format($reply, %alias));
    }
  }
}

sub privmsg {
  local($serverno, $to, $msg) = @_;
  &'s_print($serverno, '', 'PRIVMSG', $to, $msg);
  foreach $cno (&'array($'clientlist)) {
    next unless $'server[$cno] == $serverno;
    &'c_print($cno, &'user($cno), 'PRIVMSG', $to, $msg);
  }
}

sub get_msg {
  local($userno, $prefix) = @_;
  local($nick, @list, $name, $code, $line, @data);
  @list = ();
  $nick = &'prefix($prefix);
  ($name, $code) = &filename(&'property($userno, 'file'));
  if (open(FILE, $name)) {
    while (defined($line = <FILE>)) {
      $line =~ tr/\r\n//d;
      next unless $line;
      $line = &'code_utf8($line, $code) if $code;
      @data = split(/\s+/, $line, 5);
      if (&check_alias($userno, $prefix, $data[1])) {
        push(@list, $line);
      }
    }
    close(FILE);
  }
  return @list;
}

sub add_msg {
  local($userno, $msg) = @_;
  local($name, $code);
  ($name, $code) = &filename(&'property($userno, 'file'));
  $msg = &'utf8_code($msg, $code) if $code;
  if (open(FILE, ">>$name")) {
    print FILE $msg, "\n";
    close(FILE);
  }
}

sub delete_msg {
  local($userno, @list) = @_;
  local($name, $code, $list, @msg);
  @msg = ();
  ($name, $code) = &filename(&'property($userno, 'file'));
  if (open(FILE, $name)) {
    $list = &'list(@list);
    while (defined($line = <FILE>)) {
      $line =~ tr/\r\n//d;
      next unless $line;
      $line = &'code_utf8($line, $code) if $code;
      next if &'exist($list, $line);
      push(@msg, $line);
    }
    close(FILE);
    if (open(FILE, ">$name")) {
      foreach $line (@msg) {
        $line = &'utf8_code($line, $code) if $code;
        print FILE $line, "\n";
      }
      close(FILE);
    }
  }
}

sub get_alias_user {
  local($userno, $from, $prefix) = @_;
  local($file, @list);
  $file = &'property($userno, 'alias');
  foreach $list (&split_list('nick', &read_file($file))) {
    @list = &'array($list);
    if (&match_alias_user($from, @list)) {
      return &parse_alias($prefix, @list);
    }
  }
  return ();
}

sub get_alias_name_nick {
  local($userno, $from, $prefix) = @_;
  local($file, @list);
  $file = &'property($userno, 'alias');
  foreach $list (&split_list('nick', &read_file($file))) {
    @list = &'array($list);
    if (&match_alias_name_nick($from, @list)) {
      return &parse_alias($prefix, @list);
    }
  }
  return ();
}

sub check_alias {
  local($userno, $from, $name) = @_;
  local($file, @list, $nick);
  $file = &'property($userno, 'alias');
  foreach $list (&split_list('nick', &read_file($file))) {
    @list = &'array($list);
    if (&match_alias_name_nick($name, @list)) {
      if (&match_alias_user($from, @list)) {
        return 1;
      } else {
        return 0;
      }
    }
  }
  $nick = &'prefix($from);
  if ("\L$name\E" eq "\L$nick\E") {
    return 1;
  } else {
    return 0;
  }
}

sub match_alias_user {
  local($from, @list) = @_;
  local($var, $arg, $regex);
  foreach $line (@list) {
    ($var, $arg) = split(/\s+/, $line, 2);
    next unless "\L$var\E" eq 'user';
    $regex = &'regex($arg);
    next unless $from =~ /$regex/i;
    return 1;
  }
  return 0;
}

sub match_alias_name_nick {
  local($from, @list) = @_;
  local($var, $arg);
  foreach $line (@list) {
    ($var, $arg) = split(/\s+/, $line, 2);
    if ("\L$var\E" eq 'name') {
      foreach $name (split(/\s+/, $arg)) {
        next unless $from eq $name;
        return 1;
      }
    } elsif ("\L$var\E" eq 'nick') {
      next unless &'exist(&'list(split(/\s+/, $arg)), $from);
      return 1;
    }
  }
  return 0;
}

sub parse_alias {
  local($prefix, @list) = @_;
  local(%alias, $var, $arg, $key);
  %alias = ();
  foreach $line (@list) {
    ($var, $arg) = split(/\s+/, $line, 2);
    $var = "\L$var\E";
    if ($prefix) {
      $key = $prefix . '.' . $var;
    } else {
      $key = $var;
    }
    next if defined($alias{$key});
    if ($var eq 'nick') {
      $alias{$key} = (split(/\,/, $arg))[0];
    } elsif ($var eq 'name') {
      $alias{$key} = (split(/\s+/, $arg))[0];
    } else {
      $alias{$key} = $arg;
    }
  }
  return %alias;
}

sub split_list {
  local($field, @list) = @_;
  local($var, $arg, @array, @entry);
  $field = "\L$field\E";
  @array = ();
  @entry = ();
  foreach $line (@list) {
    ($var, $arg) = split(/\s*\:\s*/, $line, 2);
    if ($field eq "\L$var\E") {
      push(@array, &'list(@entry)) if @entry;
      @entry = ();
    }
    push(@entry, $var . ' ' . $arg);
  }
  push(@array, &'list(@entry)) if @entry;
  return @array;
}

sub read_file {
  local($file) = @_;
  local($name, $code, $mtime, @data, $line);
  ($name, $code) = &filename($file);
  $mtime = (stat($name))[9];
  if (defined($mtime)) {
    $modify{$name} = -1 unless defined($modify{$name});
    if ($modify{$name} != $mtime) {
      if (open(TMP, $name)) {
        @data = ();
        while (defined($line = <TMP>)) {
          $line =~ s/^\s+//;
          next if $line =~ /^[\#\;]/;
          $line =~ tr/\r\n//d;
          next unless $line;
          $line =~ s/\s+$//;
          $line = &'code_utf8($line, $code) if $code;
          push(@data, $line);
        }
        close(TMP);
        $modify{$name} = $mtime;
        $cache{$name} = &'list(@data);
        return @data;
      }
    } else {
      return &'array($cache{$name});
    }
  }
  return ();
}

sub filename {
  local($file) = @_;
  local($idx, $name, $code);
  return ('', '') unless $file;
  if (($idx = rindex($file, ';')) != -1) {
    $name = substr($file, 0, $idx);
    $code = substr($file, $idx + 1);
  } else {
    $name = $file;
    $code = '';
  }
  return (&'expand($name), $code);
}

__END__

=head1 名前

auto/message.plm - ユーザ間でメッセージの送受信を行えるようにする

=head1 説明

ユーザ間で相互にメッセージのやりとりができるようにします。
メッセージを送るための発言があると、その送り先とメッセージの内容を
ファイルに保存します。ユーザがチャンネルに入ってきたり、ニックネームを
変更したときなどに、そのユーザ宛のメッセージがないかどうか確認し、
メッセージがあれば、メッセージがあることを伝えます。
メッセージの送り先は基本的にニックネームで指定する必要がありますが、
エイリアスを参照することで漢字を含んだ名前を使うこともできます。
メッセージを受けとるための発言があると、ファイルの中からそのユーザに
対して送られたメッセージを発言し、ファイルに保存されたメッセージを
削除します。送ったメッセージを相手が受けとったかどうか確認する方法は
ありません。また、一度送ったメッセージは変更や削除することはできません。

=head1 プロパティ

=over 4

=item auto.message.file ファイル名[;({jis|euc|sjis|utf8})]

メッセージを格納するファイルを指定します。このファイルは普通の
テキストファイルで、一行につき一つのメッセージが保存されます。
漢字コードはデフォルトではjisで保存されますが、それ以外の
漢字コードで保存したい場合は、ファイル名の後にセミコロンで
区切って漢字コードを指定します。

=item auto.message.alias ファイル名[;({jis|euc|sjis|utf8})]

エイリアスを参照するファイルを指定します。
適切にエイリアスを設定しておくことで、送り先にニックネームだけ
ではなく、任意の名前を指定することができます。
また、送り元の名前もニックネームではなく、エイリアスとして
定義されている名前を使います。
このファイルはauto/alias.plmで扱えるファイルと同じ形式です。
ファイルの漢字コードがjis以外の場合は、その漢字コードを
指定する必要があります。

=item auto.message.get* 文字列

メッセージを受けとるための文字列を指定します。
ここで指定した文字列と同じ文字列が発言されると、
その人に対して送られたメッセージをファイル中から
検索して発言します。

=item auto.message.send* 文字列

メッセージを送るための文字列を指定します。
ここで指定した文字列に続けて送り先のニックネームか名前と
メッセージの内容を空白で区切って発言することにより、
そのメッセージをファイルに保存します。

=item auto.message.check* 文字列

メッセージが届いているかどうか確認するための文字列を指定します。
ここで指定した文字列と同じ文字列が発言されると、
その人に対して送られたメッセージがあるかどうか確認し、
その結果を発言します。

=item auto.message.date 文字列

auto.message.formatで指定することのできる値のうち、
#(date)で置換される日付のフォーマットを指定します。
デフォルトでは「%m/%d %H:%M」となっています。

=item auto.message.format* フォーマット

送り先にメッセージを送るときに、どのような形式で発言するかを
指定します。フォーマットに#(nick)のように書くことで、
メッセージを受けとる人のエイリアスの対応する値で置き換えます。
また、メッセージを送った人のエイリアスは#(from.nick)のような形式
で置換することができます。エイリアス以外の情報としては、
#(date)でメッセージを送った日付と時刻を、#(message)で
メッセージの内容をそれぞれ置き換えます。
また、括弧内を「|」で区切って複数指定した場合、
最初に定義されている値で置き換えます。

=item auto.message.accept* フォーマット

メッセージを正しく受け取ったときに、ここで指定したものを
発言します。フォーマットに#(nick)のように指定することで、
メッセージの送り元のエイリアスの対応する値で置き換えます。
また、#(to)でメッセージの送り先として指定した名前を、
#(to.nick)のように「to.」を付けることで、メッセージの送り先の
エイリアスの対応する値で置き換えます。

=item auto.message.unknown* フォーマット

メッセージを送る相手がわからないときに、ここで指定したものを
発言します。フォーマットに#(nick)のように指定することで、
メッセージの送り元のエイリアスの対応する値で置き換えます。
また、#(to)でメッセージを送ろうとした相手の名前に置き換えます。

=item auto.message.receive* フォーマット

チャンネルに入ってきた時や、ニックネームを変更した時に、
その人に対するメッセージが届いていれば、ここで指定したものを
発言します。フォーマットに#(nick)のように指定することで、
メッセージの送り元のエイリアスの対応する値で置き換えます。
また、#(number)で届いているメッセージの数に置き換えます。

=item auto.message.nothing* フォーマット

メッセージを受け取ろうとしたが、メッセージが
届いていなかったとき、ここで指定したものを発言します。
フォーマットに#(nick)のように指定することで、
エイリアスの対応する値で置き換えます。

=item auto.message.exists* フォーマット

メッセージが届いているかどうか確認したときに、
届いているメッセージがあれば、ここで指定したものを発言します。

=back

=head1 設定例

    + auto/message.plm
    auto.message.file: message.txt;jis
    auto.message.alias: alias.txt;jis,euc
    auto.message.get: 伝言教えて
    auto.message.send: 伝言
    auto.message.check: 伝言ある?
    auto.message.format: #(from.name|from.nick.now)さんから、「#(message)」
    auto.message.accept: #(to)さんへの伝言を覚えました
    auto.message.unknown: #(to)さんというのは誰ですか?
    auto.message.receive: #(number)個の伝言が届いています。「伝言教えて」でお伝えします。
    auto.message.nothing: #(name|nick.now)さんへの伝言はありません
    auto.message.exists: #(name|nick.now): #(number)個の伝言があります。

「伝言 pupu_j ほえほえ」のように発言すると、
「pupu_j」というニックネームの人に「ほえほえ」というメッセージを
伝えます。また「alias.txt」に指定されている名前を使って、
「伝言 ぷぷ ほえほえ」のようにしてメッセージを伝えることもできます。

メッセージが届いているときに、チャンネルに入ったり、
ニックネームを変更すると、「伝言が届いています。「伝言教えて」で見られます」
と言って知らせます。メッセージが届いているときに、
「伝言教えて」と発言すると、届いているメッセージを聞くことができます。

=cut
