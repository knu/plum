# $Id$
# copyright (c)1997-2000 Yoshinori Hasegawa <hasegawa@madoka.org>

package auto_oper;

$_ = 'auto_oper';

sub initialize {
}

sub ss_privmsg {
  local($serverno, $prefix, $cmd, @params) = @_;
  local($userno, $nick, %alias);
  $userno = $'userno[$serverno];
  $nick = &'prefix($prefix);
  %alias = &get_alias_user($userno, $prefix);
  $alias{'nick.now'} = $nick;
  if (&'channel($params[0])) {
    $alias{'channel'} = $params[0];
  }
  foreach $req (&'property($userno, 'request')) {
    next unless $params[1] =~ /$req/;
    if (!&'channel($params[0])) {
      foreach $reply (&'property($userno, 'private')) {
        &privmsg($serverno, $nick, &'format($reply, %alias));
      }
    } elsif (!&'exist($'nameslist{$serverno, $params[0]}, $nick, "\+$nick", "\@$nick")) {
      foreach $reply (&'property($userno, 'out')) {
        &privmsg($serverno, $nick, &'format($reply, %alias));
      }
    } elsif (!&'exist($'nameslist{$serverno, $params[0]}, "\@$'nick[$serverno]")) {
      foreach $reply (&'property($userno, 'notoper')) {
        &privmsg($serverno, $params[0], &'format($reply, %alias));
      }
    } elsif (&'exist($'nameslist{$serverno, $params[0]}, "\@$nick")) {
      foreach $reply (&'property($userno, 'oper')) {
        &privmsg($serverno, $params[0], &'format($reply, %alias));
      }
    } elsif (!&check_mask($userno, $prefix, $params[0])) {
      foreach $reply (&'property($userno, 'deny')) {
        &privmsg($serverno, $params[0], &'format($reply, %alias));
      }
    } else {
      foreach $reply (&'property($userno, 'message')) {
        &privmsg($serverno, $params[0], &'format($reply, %alias));
      }
      &'s_print($serverno, '', 'MODE', $params[0], '+o', $nick);
    }
    last;
  }
  return ($prefix, $cmd, @params);
}

sub privmsg {
  local($serverno, $to, $msg) = @_;
  if ($msg) {
    &'s_print($serverno, '', 'PRIVMSG', $to, $msg);
    foreach $cno (&'array($'clientlist)) {
      next unless $'server[$cno] == $serverno;
      &'c_print($cno, &'user($cno), 'PRIVMSG', $to, $msg);
    }
  }
}

sub check_mask {
  local($userno, $prefix, $chan) = @_;
  local($user, $chlist, $list, $regex);
  foreach $mask (&'property($userno, 'mask')) {
    ($user, $chlist) = split(/\s+/, $mask);
    $list = '';
    foreach $vchan (split(/\,/, $chlist || '')) {
      $list = &'add($list, &'real($vchan));
    }
    if (&'channel($chan)) {
      next unless (!$list || &'exist($list, $chan));
    } else {
      next unless (!$list || &'exist($list, '*'));
    }
    if ($user =~ /^\-/) {
      $regex = &'regex(substr($user, 1));
      return 0 if $prefix =~ /$regex/i;
    }
    if ($user =~ /^\+/) {
      $regex = &'regex(substr($user, 1));
    } else {
      $regex = &'regex($user);
    }
    return 1 if $prefix =~ /$regex/i;
  }
  return 0;
}

sub get_alias_user {
  local($userno, $from, $prefix) = @_;
  local($file, @list);
  $file = &'property($userno, 'alias');
  foreach $list (&split_list('nick', &read_file($file))) {
    @list = &'array($list);
    if (&match_alias_user($from, @list)) {
      return &parse_alias($prefix, @list);
    }
  }
  return ();
}

sub match_alias_user {
  local($from, @list) = @_;
  local($var, $arg, $regex);
  foreach $line (@list) {
    ($var, $arg) = split(/\s+/, $line, 2);
    next unless "\L$var\E" eq 'user';
    $regex = &'regex($arg);
    next unless $from =~ /$regex/i;
    return 1;
  }
  return 0;
}

sub parse_alias {
  local($prefix, @list) = @_;
  local(%alias, $var, $arg, $key);
  %alias = ();
  foreach $line (@list) {
    ($var, $arg) = split(/\s+/, $line, 2);
    $var = "\L$var\E";
    if ($prefix) {
      $key = $prefix . '.' . $var;
    } else {
      $key = $var;
    }
    next if defined($alias{$key});
    if ($var eq 'nick') {
      $alias{$key} = (split(/\,/, $arg))[0];
    } elsif ($var eq 'name') {
      $alias{$key} = (split(/\s+/, $arg))[0];
    } else {
      $alias{$key} = $arg;
    }
  }
  return %alias;
}

sub split_list {
  local($field, @list) = @_;
  local($var, $arg, @array, @entry);
  $field = "\L$field\E";
  @array = ();
  @entry = ();
  foreach $line (@list) {
    ($var, $arg) = split(/\s*\:\s*/, $line, 2);
    if ($field eq "\L$var\E") {
      push(@array, &'list(@entry)) if @entry;
      @entry = ();
    }
    push(@entry, $var . ' ' . $arg);
  }
  push(@array, &'list(@entry)) if @entry;
  return @array;
}

sub read_file {
  local($file) = @_;
  local($name, $code, $mtime, @data, $line);
  ($name, $code) = &filename($file);
  $mtime = (stat($name))[9];
  if (defined($mtime)) {
    $modify{$name} = -1 unless defined($modify{$name});
    if ($modify{$name} != $mtime) {
      if (open(TMP, $name)) {
        @data = ();
        while (defined($line = <TMP>)) {
          $line =~ s/^\s+//;
          next if $line =~ /^[\#\;]/;
          $line =~ tr/\r\n//d;
          next unless $line;
          $line =~ s/\s+$//;
          $line = &code_euc($line, $code) if $code;
          push(@data, $line);
        }
        close(TMP);
        $modify{$name} = $mtime;
        $cache{$name} = &'list(@data);
        return @data;
      }
    } else {
      return &'array($cache{$name});
    }
  }
  return ();
}

sub filename {
  local($file) = @_;
  local($idx, $name, $code);
  return ('', '') unless $file;
  if (($idx = rindex($file, ';')) != -1) {
    $name = substr($file, 0, $idx);
    $code = substr($file, $idx + 1);
  } else {
    $name = $file;
    $code = '';
  }
  return (&'expand($name), $code);
}

sub code_euc {
  local($line, $list) = @_;
  foreach $code (split(/\,/, "\L$list\E")) {
    if ($code eq 'euc') {
      $line = &'euc_euc($line);
    } elsif ($code eq 'jis') {
      $line = &'jis_euc($line);
    } elsif ($code eq 'sjis') {
      $line = &'sjis_euc($line);
    }
  }
  return $line;
}

